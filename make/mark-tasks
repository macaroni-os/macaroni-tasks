#!/bin/bash
# Description: Script to update/generate mark tasks and pipeline.
# Author: Daniele Rondina, geaaru@macaronios.org

if [ -n "$DEBUG" ] ; then set -x ; fi

specs_dir=$(dirname ${BASH_SOURCE[0]}})/../mark
specs_values=${specs_dir}/stage.values

mark_values=${specs_dir}/kits.values

prepare_stage_tasks() {

  STAGES_TASKS=$(yq r ${specs_values} 'values.stages_jobs' -l)

  stages_repo=$(yq r ${specs_values} "values.stages_repo")
  stages_repobranch=$(yq r ${specs_values} "values.stages_branch")

  for ((i=0;i<${STAGES_TASKS};i++)) ; do

    name=$(yq r ${specs_values} "values.stages_jobs[$i].name")
    jobfile=$(yq r ${specs_values} "values.stages_jobs[$i].jobfile")
    conf=$(yq r ${specs_values} "values.stages_jobs[$i].config")
    planned=$(yq r ${specs_values} "values.stages_jobs[$i].planned")
    queue=$(yq r ${specs_values} "values.stages_jobs[$i].queue")
    namespace=$(yq r ${specs_values} "values.stages_jobs[$i].namespace")
    cdnstorage=$(yq r ${specs_values} "values.stages_jobs[$i].cdnstorage")
    opts=""
    if [ -n "${planned}" ] ; then
      opts="-s planned=${planned}"
    fi

    if [ -n "${queue}" ] ; then
      opts="${opts} -s queue=${queue}"
    fi

    arches=$(yq r ${specs_values} "values.stages_jobs[$i].arches" -l)

    for ((y=0;y<${arches};y++)) ; do
      arch=$(yq r ${specs_values} "values.stages_jobs[$i].arches[$y]")

      mkdir -p ${specs_dir}/stages/${arch}/ 2>/dev/null >/dev/null || true

      echo "Creating task for job ${name} and arch ${arch}..."
      mottainai-cli task compile ${specs_dir}/templates/mark-devkit-run.tmpl \
        -s stages_repo="${stages_repo}" \
        -s stages_repobranch="${stages_repobranch}" \
        -s name="${name}" ${opts} \
        -s arch="${arch}" \
        -s namespace="${namespace}" \
        -s cdnstorage="${cdnstorage}" \
        -s jobfile="${jobfile}" \
        -s config="${conf}" \
        -o ${specs_dir}/stages/${arch}/mark-${name}.yaml

    done

  done

  return 0
}

prepare_markdevkit_release_tasks() {
  local release=$1

  local kitfixups_url=$(yq4 e ".values.releases[\"${release}\"].kit_fixups" ${mark_values} -M)
  local kitfixups_branch=$(yq4 e ".values.releases[\"${release}\"].kit_fixups_branch" ${mark_values} -M)
  local release_spec=$(yq4 e ".values.releases[\"${release}\"].release_spec" ${mark_values} -M)
  local num_kits=$(yq4 e ".values.releases[\"${release}\"].kits | length" ${mark_values} -M)
  local distfiles_sync=$(yq4 e ".values.releases[\"${release}\"].distfiles_sync // false" ${mark_values} -M)
  local distfiles_spec=$(yq4 e ".values.releases[\"${release}\"].distfiles_spec // \"\"" ${mark_values} -M)
  local distfiles_planned=$(yq4 e ".values.releases[\"${release}\"].distfiles_planned // \"\"" ${mark_values} -M)
  local s3prefix=$(yq4 e ".values.releases[\"${release}\"].s3_prefix // \"\"" ${mark_values} -M)

  local kit=""
  local withpr=""
  local specs=""
  local opts=""
  local queue=""
  local planned=""
  local mode=""
  local kitfile=""

  # Clean files the before elaboration in order to manage correctly
  # the same kit defined multiple time with different modes.
  for ((i=0;i<${num_kits};i++)) ; do
    kit=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].kit" ${mark_values} -M)
    rm ${specs_dir}/${release}/merge-${kit}.yaml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/autogen-${kit}.yaml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/autogen-${kit}-*.yml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/distfiles-sync.yaml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/clean-${kit}.yaml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/clean-${kit}-merge.yaml >/dev/null 2>&1 || true
    rm ${specs_dir}/${release}/clean-${kit}-autogen.yaml >/dev/null 2>&1 || true
  done

  for ((i=0;i<${num_kits};i++)) ; do

    mode=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].mode // \"\"" ${mark_values} -M)
    kit=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].kit" ${mark_values} -M)
    withpr=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].with_pr" ${mark_values} -M)
    specs=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].specs | join(\" \")" ${mark_values} -M)
    planned=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].planned // \"\"" ${mark_values} -M)
    queue=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].queue // \"\"" ${mark_values} -M)

    opts=""

    if [ -n "${planned}" ] ; then
      opts="-s planned=${planned}"
    fi
    if [ -n "${queue}" ] ; then
      opts="${opts} -s queue=${queue}"
    fi

    echo "Creating task for kit ${kit} and specs: ${specs} - mode ${mode}"

    if [ -z "${mode}" ] ; then
      mode="merge"
    fi


    if [ "${mode}" == "merge" ] ; then
      mottainai-cli task compile ${specs_dir}/templates/mark-devkit-merge.tmpl \
        -s kitfixups_repo="${kitfixups_url}" \
        -s kitfixups_branch="${kitfixups_branch}" \
        -s name="${kit}" ${opts} \
        -s release="${release}" \
        -s specs="${specs[@]}" \
        -s withpr="${withpr}" \
        -o ${specs_dir}/${release}/merge-${kit}.yaml || return 1
    else
      kitfile=$(yq4 e ".values.releases[\"${release}\"].kits[\"${i}\"].kitfile" ${mark_values} -M)
      # autogen mode
      mottainai-cli task compile ${specs_dir}/templates/mark-devkit-autogen.tmpl \
        -s kitfixups_repo="${kitfixups_url}" \
        -s kitfixups_branch="${kitfixups_branch}" \
        -s name="${kit}" ${opts} \
        -s release="${release}" \
        -s kitfile="${kitfile}" \
        -s specs="${specs[@]}" \
        -s withpr="${withpr}" \
        -s prefix="${s3prefix}" \
        -o ${specs_dir}/${release}/autogen-${kit}_${kitfile} || return 1
    fi

    mottainai-cli task compile ${specs_dir}/templates/mark-devkit-clean.tmpl \
      -s kitfixups_repo="${kitfixups_url}" \
      -s kitfixups_branch="${kitfixups_branch}" \
      -s name="${kit}" ${opts} \
      -s release="${release}" \
      -s specs="${specs[@]}" \
      -s withpr="${withpr}" \
      -o ${specs_dir}/${release}/clean-${kit}-${mode}.yaml || return 1

  done

  opts=""
  local release_planned=$(yq4 e ".values.releases[\"${release}\"].release_planned // \"\"" ${mark_values} -M)
  local release_queue=$(yq4 e ".values.releases[\"${release}\"].release_queue // \"\"" ${mark_values} -M)

  if [ -n "${release_planned}" ] ; then
    opts="-s planned=${release_planned}"
  fi
  if [ -n "${release_queue}" ] ; then
    opts="${opts} -s queue=${release_queue}"
  fi

  # Creating bump-release task.
  mottainai-cli task compile ${specs_dir}/templates/mark-devkit-bump-release.tmpl \
    -s kitfixups_repo="${kitfixups_url}" \
    -s kitfixups_branch="${kitfixups_branch}" ${opts} \
    -s release="${release}" \
    -s specs="${release_spec}" \
    -o ${specs_dir}/${release}/bump-release.yaml || return 1

  if [ "${distfiles_sync}" = "true" ] ; then

    opts=""
    if [ -n "${distfiles_planned}" ] ; then
      opts="-s planned=${distfiles_planned}"
    fi
    if [ -n "${release_queue}" ] ; then
      opts="${opts} -s queue=${release_queue}"
    fi

    # Creating distfiles sync task.
    mottainai-cli task compile ${specs_dir}/templates/mark-devkit-distfiles-sync.tmpl \
      -s kitfixups_repo="${kitfixups_url}" \
      -s kitfixups_branch="${kitfixups_branch}" ${opts} \
      -s release="${release}" \
      -s specs="${distfiles_spec}" \
      -s prefix="${s3prefix}" \
      -o ${specs_dir}/${release}/distfiles-sync.yaml || return 1
  fi

  return 0
}

prepare_markdevkit_tasks() {

  local releases=$(yq4 e '.values.releases | keys | .[]' ${mark_values})

  for r in ${releases} ; do

    echo "Preparing tasks/pipeline of the release ${r}..."
    prepare_markdevkit_release_tasks ${r}

  done

  return 0
}


main() {
  if [ -z "${MOTTAINAI_CLI_PROFILE}" ] ; then
    echo "MOTTAINAI_CLI_PROFILE env variable not defined"
    exit 1
  fi

  prepare_stage_tasks || {
    return 1
  }

  prepare_markdevkit_tasks || {
    return 1
  }

  return 0
}

main $@
exit $?

# vim: filetype=sh
